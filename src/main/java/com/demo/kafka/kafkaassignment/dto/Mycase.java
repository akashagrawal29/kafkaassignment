/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demo.kafka.kafkaassignment.dto;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Mycase extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2800577571923250147L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Mycase\",\"namespace\":\"com.demo.kafka.kafkaassignment.dto\",\"fields\":[{\"name\":\"case_NUMBER\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"case_TYPE\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"case_CODE\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"case_START_DATE\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"case_END_DATE\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"case_AUTH_TYPE\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"case_STATUS\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mysource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Mycase> ENCODER =
      new BinaryMessageEncoder<Mycase>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Mycase> DECODER =
      new BinaryMessageDecoder<Mycase>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Mycase> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Mycase> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Mycase> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Mycase>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Mycase to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Mycase from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Mycase instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Mycase fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private String case_NUMBER;
  private String case_TYPE;
  private String case_CODE;
  private String case_START_DATE;
  private String case_END_DATE;
  private String case_AUTH_TYPE;
  private String case_STATUS;
  private String mysource;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Mycase() {}

  /**
   * All-args constructor.
   * @param case_NUMBER The new value for case_NUMBER
   * @param case_TYPE The new value for case_TYPE
   * @param case_CODE The new value for case_CODE
   * @param case_START_DATE The new value for case_START_DATE
   * @param case_END_DATE The new value for case_END_DATE
   * @param case_AUTH_TYPE The new value for case_AUTH_TYPE
   * @param case_STATUS The new value for case_STATUS
   * @param mysource The new value for mysource
   */
  public Mycase(String case_NUMBER, String case_TYPE, String case_CODE, String case_START_DATE, String case_END_DATE, String case_AUTH_TYPE, String case_STATUS, String mysource) {
    this.case_NUMBER = case_NUMBER;
    this.case_TYPE = case_TYPE;
    this.case_CODE = case_CODE;
    this.case_START_DATE = case_START_DATE;
    this.case_END_DATE = case_END_DATE;
    this.case_AUTH_TYPE = case_AUTH_TYPE;
    this.case_STATUS = case_STATUS;
    this.mysource = mysource;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return case_NUMBER;
    case 1: return case_TYPE;
    case 2: return case_CODE;
    case 3: return case_START_DATE;
    case 4: return case_END_DATE;
    case 5: return case_AUTH_TYPE;
    case 6: return case_STATUS;
    case 7: return mysource;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: case_NUMBER = value$ != null ? value$.toString() : null; break;
    case 1: case_TYPE = value$ != null ? value$.toString() : null; break;
    case 2: case_CODE = value$ != null ? value$.toString() : null; break;
    case 3: case_START_DATE = value$ != null ? value$.toString() : null; break;
    case 4: case_END_DATE = value$ != null ? value$.toString() : null; break;
    case 5: case_AUTH_TYPE = value$ != null ? value$.toString() : null; break;
    case 6: case_STATUS = value$ != null ? value$.toString() : null; break;
    case 7: mysource = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'case_NUMBER' field.
   * @return The value of the 'case_NUMBER' field.
   */
  public String getCaseNUMBER() {
    return case_NUMBER;
  }


  /**
   * Sets the value of the 'case_NUMBER' field.
   * @param value the value to set.
   */
  public void setCaseNUMBER(String value) {
    this.case_NUMBER = value;
  }

  /**
   * Gets the value of the 'case_TYPE' field.
   * @return The value of the 'case_TYPE' field.
   */
  public String getCaseTYPE() {
    return case_TYPE;
  }


  /**
   * Sets the value of the 'case_TYPE' field.
   * @param value the value to set.
   */
  public void setCaseTYPE(String value) {
    this.case_TYPE = value;
  }

  /**
   * Gets the value of the 'case_CODE' field.
   * @return The value of the 'case_CODE' field.
   */
  public String getCaseCODE() {
    return case_CODE;
  }


  /**
   * Sets the value of the 'case_CODE' field.
   * @param value the value to set.
   */
  public void setCaseCODE(String value) {
    this.case_CODE = value;
  }

  /**
   * Gets the value of the 'case_START_DATE' field.
   * @return The value of the 'case_START_DATE' field.
   */
  public String getCaseSTARTDATE() {
    return case_START_DATE;
  }


  /**
   * Sets the value of the 'case_START_DATE' field.
   * @param value the value to set.
   */
  public void setCaseSTARTDATE(String value) {
    this.case_START_DATE = value;
  }

  /**
   * Gets the value of the 'case_END_DATE' field.
   * @return The value of the 'case_END_DATE' field.
   */
  public String getCaseENDDATE() {
    return case_END_DATE;
  }


  /**
   * Sets the value of the 'case_END_DATE' field.
   * @param value the value to set.
   */
  public void setCaseENDDATE(String value) {
    this.case_END_DATE = value;
  }

  /**
   * Gets the value of the 'case_AUTH_TYPE' field.
   * @return The value of the 'case_AUTH_TYPE' field.
   */
  public String getCaseAUTHTYPE() {
    return case_AUTH_TYPE;
  }


  /**
   * Sets the value of the 'case_AUTH_TYPE' field.
   * @param value the value to set.
   */
  public void setCaseAUTHTYPE(String value) {
    this.case_AUTH_TYPE = value;
  }

  /**
   * Gets the value of the 'case_STATUS' field.
   * @return The value of the 'case_STATUS' field.
   */
  public String getCaseSTATUS() {
    return case_STATUS;
  }


  /**
   * Sets the value of the 'case_STATUS' field.
   * @param value the value to set.
   */
  public void setCaseSTATUS(String value) {
    this.case_STATUS = value;
  }

  /**
   * Gets the value of the 'mysource' field.
   * @return The value of the 'mysource' field.
   */
  public String getMysource() {
    return mysource;
  }


  /**
   * Sets the value of the 'mysource' field.
   * @param value the value to set.
   */
  public void setMysource(String value) {
    this.mysource = value;
  }

  /**
   * Creates a new Mycase RecordBuilder.
   * @return A new Mycase RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Mycase RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Mycase RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Mycase RecordBuilder by copying an existing Mycase instance.
   * @param other The existing instance to copy.
   * @return A new Mycase RecordBuilder
   */
  public static Builder newBuilder(Mycase other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Mycase instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Mycase>
    implements org.apache.avro.data.RecordBuilder<Mycase> {

    private String case_NUMBER;
    private String case_TYPE;
    private String case_CODE;
    private String case_START_DATE;
    private String case_END_DATE;
    private String case_AUTH_TYPE;
    private String case_STATUS;
    private String mysource;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.case_NUMBER)) {
        this.case_NUMBER = data().deepCopy(fields()[0].schema(), other.case_NUMBER);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.case_TYPE)) {
        this.case_TYPE = data().deepCopy(fields()[1].schema(), other.case_TYPE);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.case_CODE)) {
        this.case_CODE = data().deepCopy(fields()[2].schema(), other.case_CODE);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.case_START_DATE)) {
        this.case_START_DATE = data().deepCopy(fields()[3].schema(), other.case_START_DATE);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.case_END_DATE)) {
        this.case_END_DATE = data().deepCopy(fields()[4].schema(), other.case_END_DATE);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.case_AUTH_TYPE)) {
        this.case_AUTH_TYPE = data().deepCopy(fields()[5].schema(), other.case_AUTH_TYPE);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.case_STATUS)) {
        this.case_STATUS = data().deepCopy(fields()[6].schema(), other.case_STATUS);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.mysource)) {
        this.mysource = data().deepCopy(fields()[7].schema(), other.mysource);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Mycase instance
     * @param other The existing instance to copy.
     */
    private Builder(Mycase other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.case_NUMBER)) {
        this.case_NUMBER = data().deepCopy(fields()[0].schema(), other.case_NUMBER);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.case_TYPE)) {
        this.case_TYPE = data().deepCopy(fields()[1].schema(), other.case_TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.case_CODE)) {
        this.case_CODE = data().deepCopy(fields()[2].schema(), other.case_CODE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.case_START_DATE)) {
        this.case_START_DATE = data().deepCopy(fields()[3].schema(), other.case_START_DATE);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.case_END_DATE)) {
        this.case_END_DATE = data().deepCopy(fields()[4].schema(), other.case_END_DATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.case_AUTH_TYPE)) {
        this.case_AUTH_TYPE = data().deepCopy(fields()[5].schema(), other.case_AUTH_TYPE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.case_STATUS)) {
        this.case_STATUS = data().deepCopy(fields()[6].schema(), other.case_STATUS);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mysource)) {
        this.mysource = data().deepCopy(fields()[7].schema(), other.mysource);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'case_NUMBER' field.
      * @return The value.
      */
    public String getCaseNUMBER() {
      return case_NUMBER;
    }


    /**
      * Sets the value of the 'case_NUMBER' field.
      * @param value The value of 'case_NUMBER'.
      * @return This builder.
      */
    public Builder setCaseNUMBER(String value) {
      validate(fields()[0], value);
      this.case_NUMBER = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'case_NUMBER' field has been set.
      * @return True if the 'case_NUMBER' field has been set, false otherwise.
      */
    public boolean hasCaseNUMBER() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'case_NUMBER' field.
      * @return This builder.
      */
    public Builder clearCaseNUMBER() {
      case_NUMBER = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'case_TYPE' field.
      * @return The value.
      */
    public String getCaseTYPE() {
      return case_TYPE;
    }


    /**
      * Sets the value of the 'case_TYPE' field.
      * @param value The value of 'case_TYPE'.
      * @return This builder.
      */
    public Builder setCaseTYPE(String value) {
      validate(fields()[1], value);
      this.case_TYPE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'case_TYPE' field has been set.
      * @return True if the 'case_TYPE' field has been set, false otherwise.
      */
    public boolean hasCaseTYPE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'case_TYPE' field.
      * @return This builder.
      */
    public Builder clearCaseTYPE() {
      case_TYPE = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'case_CODE' field.
      * @return The value.
      */
    public String getCaseCODE() {
      return case_CODE;
    }


    /**
      * Sets the value of the 'case_CODE' field.
      * @param value The value of 'case_CODE'.
      * @return This builder.
      */
    public Builder setCaseCODE(String value) {
      validate(fields()[2], value);
      this.case_CODE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'case_CODE' field has been set.
      * @return True if the 'case_CODE' field has been set, false otherwise.
      */
    public boolean hasCaseCODE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'case_CODE' field.
      * @return This builder.
      */
    public Builder clearCaseCODE() {
      case_CODE = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'case_START_DATE' field.
      * @return The value.
      */
    public String getCaseSTARTDATE() {
      return case_START_DATE;
    }


    /**
      * Sets the value of the 'case_START_DATE' field.
      * @param value The value of 'case_START_DATE'.
      * @return This builder.
      */
    public Builder setCaseSTARTDATE(String value) {
      validate(fields()[3], value);
      this.case_START_DATE = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'case_START_DATE' field has been set.
      * @return True if the 'case_START_DATE' field has been set, false otherwise.
      */
    public boolean hasCaseSTARTDATE() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'case_START_DATE' field.
      * @return This builder.
      */
    public Builder clearCaseSTARTDATE() {
      case_START_DATE = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'case_END_DATE' field.
      * @return The value.
      */
    public String getCaseENDDATE() {
      return case_END_DATE;
    }


    /**
      * Sets the value of the 'case_END_DATE' field.
      * @param value The value of 'case_END_DATE'.
      * @return This builder.
      */
    public Builder setCaseENDDATE(String value) {
      validate(fields()[4], value);
      this.case_END_DATE = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'case_END_DATE' field has been set.
      * @return True if the 'case_END_DATE' field has been set, false otherwise.
      */
    public boolean hasCaseENDDATE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'case_END_DATE' field.
      * @return This builder.
      */
    public Builder clearCaseENDDATE() {
      case_END_DATE = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'case_AUTH_TYPE' field.
      * @return The value.
      */
    public String getCaseAUTHTYPE() {
      return case_AUTH_TYPE;
    }


    /**
      * Sets the value of the 'case_AUTH_TYPE' field.
      * @param value The value of 'case_AUTH_TYPE'.
      * @return This builder.
      */
    public Builder setCaseAUTHTYPE(String value) {
      validate(fields()[5], value);
      this.case_AUTH_TYPE = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'case_AUTH_TYPE' field has been set.
      * @return True if the 'case_AUTH_TYPE' field has been set, false otherwise.
      */
    public boolean hasCaseAUTHTYPE() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'case_AUTH_TYPE' field.
      * @return This builder.
      */
    public Builder clearCaseAUTHTYPE() {
      case_AUTH_TYPE = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'case_STATUS' field.
      * @return The value.
      */
    public String getCaseSTATUS() {
      return case_STATUS;
    }


    /**
      * Sets the value of the 'case_STATUS' field.
      * @param value The value of 'case_STATUS'.
      * @return This builder.
      */
    public Builder setCaseSTATUS(String value) {
      validate(fields()[6], value);
      this.case_STATUS = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'case_STATUS' field has been set.
      * @return True if the 'case_STATUS' field has been set, false otherwise.
      */
    public boolean hasCaseSTATUS() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'case_STATUS' field.
      * @return This builder.
      */
    public Builder clearCaseSTATUS() {
      case_STATUS = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mysource' field.
      * @return The value.
      */
    public String getMysource() {
      return mysource;
    }


    /**
      * Sets the value of the 'mysource' field.
      * @param value The value of 'mysource'.
      * @return This builder.
      */
    public Builder setMysource(String value) {
      validate(fields()[7], value);
      this.mysource = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mysource' field has been set.
      * @return True if the 'mysource' field has been set, false otherwise.
      */
    public boolean hasMysource() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mysource' field.
      * @return This builder.
      */
    public Builder clearMysource() {
      mysource = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Mycase build() {
      try {
        Mycase record = new Mycase();
        record.case_NUMBER = fieldSetFlags()[0] ? this.case_NUMBER : (String) defaultValue(fields()[0]);
        record.case_TYPE = fieldSetFlags()[1] ? this.case_TYPE : (String) defaultValue(fields()[1]);
        record.case_CODE = fieldSetFlags()[2] ? this.case_CODE : (String) defaultValue(fields()[2]);
        record.case_START_DATE = fieldSetFlags()[3] ? this.case_START_DATE : (String) defaultValue(fields()[3]);
        record.case_END_DATE = fieldSetFlags()[4] ? this.case_END_DATE : (String) defaultValue(fields()[4]);
        record.case_AUTH_TYPE = fieldSetFlags()[5] ? this.case_AUTH_TYPE : (String) defaultValue(fields()[5]);
        record.case_STATUS = fieldSetFlags()[6] ? this.case_STATUS : (String) defaultValue(fields()[6]);
        record.mysource = fieldSetFlags()[7] ? this.mysource : (String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Mycase>
    WRITER$ = (org.apache.avro.io.DatumWriter<Mycase>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Mycase>
    READER$ = (org.apache.avro.io.DatumReader<Mycase>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.case_NUMBER);

    out.writeString(this.case_TYPE);

    out.writeString(this.case_CODE);

    out.writeString(this.case_START_DATE);

    out.writeString(this.case_END_DATE);

    out.writeString(this.case_AUTH_TYPE);

    out.writeString(this.case_STATUS);

    out.writeString(this.mysource);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.case_NUMBER = in.readString();

      this.case_TYPE = in.readString();

      this.case_CODE = in.readString();

      this.case_START_DATE = in.readString();

      this.case_END_DATE = in.readString();

      this.case_AUTH_TYPE = in.readString();

      this.case_STATUS = in.readString();

      this.mysource = in.readString();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.case_NUMBER = in.readString();
          break;

        case 1:
          this.case_TYPE = in.readString();
          break;

        case 2:
          this.case_CODE = in.readString();
          break;

        case 3:
          this.case_START_DATE = in.readString();
          break;

        case 4:
          this.case_END_DATE = in.readString();
          break;

        case 5:
          this.case_AUTH_TYPE = in.readString();
          break;

        case 6:
          this.case_STATUS = in.readString();
          break;

        case 7:
          this.mysource = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










