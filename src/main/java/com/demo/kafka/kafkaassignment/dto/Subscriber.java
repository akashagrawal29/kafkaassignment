/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demo.kafka.kafkaassignment.dto;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Subscriber extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8792050480635058491L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Subscriber\",\"namespace\":\"com.demo.kafka.kafkaassignment.dto\",\"fields\":[{\"name\":\"case_NUMBER\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_ID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_FIRST_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_MIDDLE_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_LAST_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_ADD_1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_ADD_2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_CITY\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mem_PIN\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mysource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Subscriber> ENCODER =
      new BinaryMessageEncoder<Subscriber>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Subscriber> DECODER =
      new BinaryMessageDecoder<Subscriber>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Subscriber> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Subscriber> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Subscriber> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Subscriber>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Subscriber to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Subscriber from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Subscriber instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Subscriber fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private String case_NUMBER;
  private String mem_ID;
  private String mem_FIRST_NAME;
  private String mem_MIDDLE_NAME;
  private String mem_LAST_NAME;
  private String mem_ADD_1;
  private String mem_ADD_2;
  private String mem_CITY;
  private String mem_PIN;
  private String mysource;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Subscriber() {}

  /**
   * All-args constructor.
   * @param case_NUMBER The new value for case_NUMBER
   * @param mem_ID The new value for mem_ID
   * @param mem_FIRST_NAME The new value for mem_FIRST_NAME
   * @param mem_MIDDLE_NAME The new value for mem_MIDDLE_NAME
   * @param mem_LAST_NAME The new value for mem_LAST_NAME
   * @param mem_ADD_1 The new value for mem_ADD_1
   * @param mem_ADD_2 The new value for mem_ADD_2
   * @param mem_CITY The new value for mem_CITY
   * @param mem_PIN The new value for mem_PIN
   * @param mysource The new value for mysource
   */
  public Subscriber(String case_NUMBER, String mem_ID, String mem_FIRST_NAME, String mem_MIDDLE_NAME, String mem_LAST_NAME, String mem_ADD_1, String mem_ADD_2, String mem_CITY, String mem_PIN, String mysource) {
    this.case_NUMBER = case_NUMBER;
    this.mem_ID = mem_ID;
    this.mem_FIRST_NAME = mem_FIRST_NAME;
    this.mem_MIDDLE_NAME = mem_MIDDLE_NAME;
    this.mem_LAST_NAME = mem_LAST_NAME;
    this.mem_ADD_1 = mem_ADD_1;
    this.mem_ADD_2 = mem_ADD_2;
    this.mem_CITY = mem_CITY;
    this.mem_PIN = mem_PIN;
    this.mysource = mysource;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return case_NUMBER;
    case 1: return mem_ID;
    case 2: return mem_FIRST_NAME;
    case 3: return mem_MIDDLE_NAME;
    case 4: return mem_LAST_NAME;
    case 5: return mem_ADD_1;
    case 6: return mem_ADD_2;
    case 7: return mem_CITY;
    case 8: return mem_PIN;
    case 9: return mysource;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: case_NUMBER = value$ != null ? value$.toString() : null; break;
    case 1: mem_ID = value$ != null ? value$.toString() : null; break;
    case 2: mem_FIRST_NAME = value$ != null ? value$.toString() : null; break;
    case 3: mem_MIDDLE_NAME = value$ != null ? value$.toString() : null; break;
    case 4: mem_LAST_NAME = value$ != null ? value$.toString() : null; break;
    case 5: mem_ADD_1 = value$ != null ? value$.toString() : null; break;
    case 6: mem_ADD_2 = value$ != null ? value$.toString() : null; break;
    case 7: mem_CITY = value$ != null ? value$.toString() : null; break;
    case 8: mem_PIN = value$ != null ? value$.toString() : null; break;
    case 9: mysource = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'case_NUMBER' field.
   * @return The value of the 'case_NUMBER' field.
   */
  public String getCaseNUMBER() {
    return case_NUMBER;
  }


  /**
   * Sets the value of the 'case_NUMBER' field.
   * @param value the value to set.
   */
  public void setCaseNUMBER(String value) {
    this.case_NUMBER = value;
  }

  /**
   * Gets the value of the 'mem_ID' field.
   * @return The value of the 'mem_ID' field.
   */
  public String getMemID() {
    return mem_ID;
  }


  /**
   * Sets the value of the 'mem_ID' field.
   * @param value the value to set.
   */
  public void setMemID(String value) {
    this.mem_ID = value;
  }

  /**
   * Gets the value of the 'mem_FIRST_NAME' field.
   * @return The value of the 'mem_FIRST_NAME' field.
   */
  public String getMemFIRSTNAME() {
    return mem_FIRST_NAME;
  }


  /**
   * Sets the value of the 'mem_FIRST_NAME' field.
   * @param value the value to set.
   */
  public void setMemFIRSTNAME(String value) {
    this.mem_FIRST_NAME = value;
  }

  /**
   * Gets the value of the 'mem_MIDDLE_NAME' field.
   * @return The value of the 'mem_MIDDLE_NAME' field.
   */
  public String getMemMIDDLENAME() {
    return mem_MIDDLE_NAME;
  }


  /**
   * Sets the value of the 'mem_MIDDLE_NAME' field.
   * @param value the value to set.
   */
  public void setMemMIDDLENAME(String value) {
    this.mem_MIDDLE_NAME = value;
  }

  /**
   * Gets the value of the 'mem_LAST_NAME' field.
   * @return The value of the 'mem_LAST_NAME' field.
   */
  public String getMemLASTNAME() {
    return mem_LAST_NAME;
  }


  /**
   * Sets the value of the 'mem_LAST_NAME' field.
   * @param value the value to set.
   */
  public void setMemLASTNAME(String value) {
    this.mem_LAST_NAME = value;
  }

  /**
   * Gets the value of the 'mem_ADD_1' field.
   * @return The value of the 'mem_ADD_1' field.
   */
  public String getMemADD1() {
    return mem_ADD_1;
  }


  /**
   * Sets the value of the 'mem_ADD_1' field.
   * @param value the value to set.
   */
  public void setMemADD1(String value) {
    this.mem_ADD_1 = value;
  }

  /**
   * Gets the value of the 'mem_ADD_2' field.
   * @return The value of the 'mem_ADD_2' field.
   */
  public String getMemADD2() {
    return mem_ADD_2;
  }


  /**
   * Sets the value of the 'mem_ADD_2' field.
   * @param value the value to set.
   */
  public void setMemADD2(String value) {
    this.mem_ADD_2 = value;
  }

  /**
   * Gets the value of the 'mem_CITY' field.
   * @return The value of the 'mem_CITY' field.
   */
  public String getMemCITY() {
    return mem_CITY;
  }


  /**
   * Sets the value of the 'mem_CITY' field.
   * @param value the value to set.
   */
  public void setMemCITY(String value) {
    this.mem_CITY = value;
  }

  /**
   * Gets the value of the 'mem_PIN' field.
   * @return The value of the 'mem_PIN' field.
   */
  public String getMemPIN() {
    return mem_PIN;
  }


  /**
   * Sets the value of the 'mem_PIN' field.
   * @param value the value to set.
   */
  public void setMemPIN(String value) {
    this.mem_PIN = value;
  }

  /**
   * Gets the value of the 'mysource' field.
   * @return The value of the 'mysource' field.
   */
  public String getMysource() {
    return mysource;
  }


  /**
   * Sets the value of the 'mysource' field.
   * @param value the value to set.
   */
  public void setMysource(String value) {
    this.mysource = value;
  }

  /**
   * Creates a new Subscriber RecordBuilder.
   * @return A new Subscriber RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Subscriber RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Subscriber RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Subscriber RecordBuilder by copying an existing Subscriber instance.
   * @param other The existing instance to copy.
   * @return A new Subscriber RecordBuilder
   */
  public static Builder newBuilder(Subscriber other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Subscriber instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Subscriber>
    implements org.apache.avro.data.RecordBuilder<Subscriber> {

    private String case_NUMBER;
    private String mem_ID;
    private String mem_FIRST_NAME;
    private String mem_MIDDLE_NAME;
    private String mem_LAST_NAME;
    private String mem_ADD_1;
    private String mem_ADD_2;
    private String mem_CITY;
    private String mem_PIN;
    private String mysource;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.case_NUMBER)) {
        this.case_NUMBER = data().deepCopy(fields()[0].schema(), other.case_NUMBER);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mem_ID)) {
        this.mem_ID = data().deepCopy(fields()[1].schema(), other.mem_ID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mem_FIRST_NAME)) {
        this.mem_FIRST_NAME = data().deepCopy(fields()[2].schema(), other.mem_FIRST_NAME);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.mem_MIDDLE_NAME)) {
        this.mem_MIDDLE_NAME = data().deepCopy(fields()[3].schema(), other.mem_MIDDLE_NAME);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.mem_LAST_NAME)) {
        this.mem_LAST_NAME = data().deepCopy(fields()[4].schema(), other.mem_LAST_NAME);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.mem_ADD_1)) {
        this.mem_ADD_1 = data().deepCopy(fields()[5].schema(), other.mem_ADD_1);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.mem_ADD_2)) {
        this.mem_ADD_2 = data().deepCopy(fields()[6].schema(), other.mem_ADD_2);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.mem_CITY)) {
        this.mem_CITY = data().deepCopy(fields()[7].schema(), other.mem_CITY);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.mem_PIN)) {
        this.mem_PIN = data().deepCopy(fields()[8].schema(), other.mem_PIN);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.mysource)) {
        this.mysource = data().deepCopy(fields()[9].schema(), other.mysource);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Subscriber instance
     * @param other The existing instance to copy.
     */
    private Builder(Subscriber other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.case_NUMBER)) {
        this.case_NUMBER = data().deepCopy(fields()[0].schema(), other.case_NUMBER);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mem_ID)) {
        this.mem_ID = data().deepCopy(fields()[1].schema(), other.mem_ID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mem_FIRST_NAME)) {
        this.mem_FIRST_NAME = data().deepCopy(fields()[2].schema(), other.mem_FIRST_NAME);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mem_MIDDLE_NAME)) {
        this.mem_MIDDLE_NAME = data().deepCopy(fields()[3].schema(), other.mem_MIDDLE_NAME);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mem_LAST_NAME)) {
        this.mem_LAST_NAME = data().deepCopy(fields()[4].schema(), other.mem_LAST_NAME);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mem_ADD_1)) {
        this.mem_ADD_1 = data().deepCopy(fields()[5].schema(), other.mem_ADD_1);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mem_ADD_2)) {
        this.mem_ADD_2 = data().deepCopy(fields()[6].schema(), other.mem_ADD_2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mem_CITY)) {
        this.mem_CITY = data().deepCopy(fields()[7].schema(), other.mem_CITY);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.mem_PIN)) {
        this.mem_PIN = data().deepCopy(fields()[8].schema(), other.mem_PIN);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mysource)) {
        this.mysource = data().deepCopy(fields()[9].schema(), other.mysource);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'case_NUMBER' field.
      * @return The value.
      */
    public String getCaseNUMBER() {
      return case_NUMBER;
    }


    /**
      * Sets the value of the 'case_NUMBER' field.
      * @param value The value of 'case_NUMBER'.
      * @return This builder.
      */
    public Builder setCaseNUMBER(String value) {
      validate(fields()[0], value);
      this.case_NUMBER = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'case_NUMBER' field has been set.
      * @return True if the 'case_NUMBER' field has been set, false otherwise.
      */
    public boolean hasCaseNUMBER() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'case_NUMBER' field.
      * @return This builder.
      */
    public Builder clearCaseNUMBER() {
      case_NUMBER = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_ID' field.
      * @return The value.
      */
    public String getMemID() {
      return mem_ID;
    }


    /**
      * Sets the value of the 'mem_ID' field.
      * @param value The value of 'mem_ID'.
      * @return This builder.
      */
    public Builder setMemID(String value) {
      validate(fields()[1], value);
      this.mem_ID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_ID' field has been set.
      * @return True if the 'mem_ID' field has been set, false otherwise.
      */
    public boolean hasMemID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mem_ID' field.
      * @return This builder.
      */
    public Builder clearMemID() {
      mem_ID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_FIRST_NAME' field.
      * @return The value.
      */
    public String getMemFIRSTNAME() {
      return mem_FIRST_NAME;
    }


    /**
      * Sets the value of the 'mem_FIRST_NAME' field.
      * @param value The value of 'mem_FIRST_NAME'.
      * @return This builder.
      */
    public Builder setMemFIRSTNAME(String value) {
      validate(fields()[2], value);
      this.mem_FIRST_NAME = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_FIRST_NAME' field has been set.
      * @return True if the 'mem_FIRST_NAME' field has been set, false otherwise.
      */
    public boolean hasMemFIRSTNAME() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mem_FIRST_NAME' field.
      * @return This builder.
      */
    public Builder clearMemFIRSTNAME() {
      mem_FIRST_NAME = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_MIDDLE_NAME' field.
      * @return The value.
      */
    public String getMemMIDDLENAME() {
      return mem_MIDDLE_NAME;
    }


    /**
      * Sets the value of the 'mem_MIDDLE_NAME' field.
      * @param value The value of 'mem_MIDDLE_NAME'.
      * @return This builder.
      */
    public Builder setMemMIDDLENAME(String value) {
      validate(fields()[3], value);
      this.mem_MIDDLE_NAME = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_MIDDLE_NAME' field has been set.
      * @return True if the 'mem_MIDDLE_NAME' field has been set, false otherwise.
      */
    public boolean hasMemMIDDLENAME() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mem_MIDDLE_NAME' field.
      * @return This builder.
      */
    public Builder clearMemMIDDLENAME() {
      mem_MIDDLE_NAME = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_LAST_NAME' field.
      * @return The value.
      */
    public String getMemLASTNAME() {
      return mem_LAST_NAME;
    }


    /**
      * Sets the value of the 'mem_LAST_NAME' field.
      * @param value The value of 'mem_LAST_NAME'.
      * @return This builder.
      */
    public Builder setMemLASTNAME(String value) {
      validate(fields()[4], value);
      this.mem_LAST_NAME = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_LAST_NAME' field has been set.
      * @return True if the 'mem_LAST_NAME' field has been set, false otherwise.
      */
    public boolean hasMemLASTNAME() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mem_LAST_NAME' field.
      * @return This builder.
      */
    public Builder clearMemLASTNAME() {
      mem_LAST_NAME = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_ADD_1' field.
      * @return The value.
      */
    public String getMemADD1() {
      return mem_ADD_1;
    }


    /**
      * Sets the value of the 'mem_ADD_1' field.
      * @param value The value of 'mem_ADD_1'.
      * @return This builder.
      */
    public Builder setMemADD1(String value) {
      validate(fields()[5], value);
      this.mem_ADD_1 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_ADD_1' field has been set.
      * @return True if the 'mem_ADD_1' field has been set, false otherwise.
      */
    public boolean hasMemADD1() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mem_ADD_1' field.
      * @return This builder.
      */
    public Builder clearMemADD1() {
      mem_ADD_1 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_ADD_2' field.
      * @return The value.
      */
    public String getMemADD2() {
      return mem_ADD_2;
    }


    /**
      * Sets the value of the 'mem_ADD_2' field.
      * @param value The value of 'mem_ADD_2'.
      * @return This builder.
      */
    public Builder setMemADD2(String value) {
      validate(fields()[6], value);
      this.mem_ADD_2 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_ADD_2' field has been set.
      * @return True if the 'mem_ADD_2' field has been set, false otherwise.
      */
    public boolean hasMemADD2() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mem_ADD_2' field.
      * @return This builder.
      */
    public Builder clearMemADD2() {
      mem_ADD_2 = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_CITY' field.
      * @return The value.
      */
    public String getMemCITY() {
      return mem_CITY;
    }


    /**
      * Sets the value of the 'mem_CITY' field.
      * @param value The value of 'mem_CITY'.
      * @return This builder.
      */
    public Builder setMemCITY(String value) {
      validate(fields()[7], value);
      this.mem_CITY = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_CITY' field has been set.
      * @return True if the 'mem_CITY' field has been set, false otherwise.
      */
    public boolean hasMemCITY() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mem_CITY' field.
      * @return This builder.
      */
    public Builder clearMemCITY() {
      mem_CITY = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'mem_PIN' field.
      * @return The value.
      */
    public String getMemPIN() {
      return mem_PIN;
    }


    /**
      * Sets the value of the 'mem_PIN' field.
      * @param value The value of 'mem_PIN'.
      * @return This builder.
      */
    public Builder setMemPIN(String value) {
      validate(fields()[8], value);
      this.mem_PIN = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'mem_PIN' field has been set.
      * @return True if the 'mem_PIN' field has been set, false otherwise.
      */
    public boolean hasMemPIN() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'mem_PIN' field.
      * @return This builder.
      */
    public Builder clearMemPIN() {
      mem_PIN = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'mysource' field.
      * @return The value.
      */
    public String getMysource() {
      return mysource;
    }


    /**
      * Sets the value of the 'mysource' field.
      * @param value The value of 'mysource'.
      * @return This builder.
      */
    public Builder setMysource(String value) {
      validate(fields()[9], value);
      this.mysource = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'mysource' field has been set.
      * @return True if the 'mysource' field has been set, false otherwise.
      */
    public boolean hasMysource() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'mysource' field.
      * @return This builder.
      */
    public Builder clearMysource() {
      mysource = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Subscriber build() {
      try {
        Subscriber record = new Subscriber();
        record.case_NUMBER = fieldSetFlags()[0] ? this.case_NUMBER : (String) defaultValue(fields()[0]);
        record.mem_ID = fieldSetFlags()[1] ? this.mem_ID : (String) defaultValue(fields()[1]);
        record.mem_FIRST_NAME = fieldSetFlags()[2] ? this.mem_FIRST_NAME : (String) defaultValue(fields()[2]);
        record.mem_MIDDLE_NAME = fieldSetFlags()[3] ? this.mem_MIDDLE_NAME : (String) defaultValue(fields()[3]);
        record.mem_LAST_NAME = fieldSetFlags()[4] ? this.mem_LAST_NAME : (String) defaultValue(fields()[4]);
        record.mem_ADD_1 = fieldSetFlags()[5] ? this.mem_ADD_1 : (String) defaultValue(fields()[5]);
        record.mem_ADD_2 = fieldSetFlags()[6] ? this.mem_ADD_2 : (String) defaultValue(fields()[6]);
        record.mem_CITY = fieldSetFlags()[7] ? this.mem_CITY : (String) defaultValue(fields()[7]);
        record.mem_PIN = fieldSetFlags()[8] ? this.mem_PIN : (String) defaultValue(fields()[8]);
        record.mysource = fieldSetFlags()[9] ? this.mysource : (String) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Subscriber>
    WRITER$ = (org.apache.avro.io.DatumWriter<Subscriber>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Subscriber>
    READER$ = (org.apache.avro.io.DatumReader<Subscriber>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.case_NUMBER);

    out.writeString(this.mem_ID);

    out.writeString(this.mem_FIRST_NAME);

    out.writeString(this.mem_MIDDLE_NAME);

    out.writeString(this.mem_LAST_NAME);

    out.writeString(this.mem_ADD_1);

    out.writeString(this.mem_ADD_2);

    out.writeString(this.mem_CITY);

    out.writeString(this.mem_PIN);

    out.writeString(this.mysource);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.case_NUMBER = in.readString();

      this.mem_ID = in.readString();

      this.mem_FIRST_NAME = in.readString();

      this.mem_MIDDLE_NAME = in.readString();

      this.mem_LAST_NAME = in.readString();

      this.mem_ADD_1 = in.readString();

      this.mem_ADD_2 = in.readString();

      this.mem_CITY = in.readString();

      this.mem_PIN = in.readString();

      this.mysource = in.readString();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.case_NUMBER = in.readString();
          break;

        case 1:
          this.mem_ID = in.readString();
          break;

        case 2:
          this.mem_FIRST_NAME = in.readString();
          break;

        case 3:
          this.mem_MIDDLE_NAME = in.readString();
          break;

        case 4:
          this.mem_LAST_NAME = in.readString();
          break;

        case 5:
          this.mem_ADD_1 = in.readString();
          break;

        case 6:
          this.mem_ADD_2 = in.readString();
          break;

        case 7:
          this.mem_CITY = in.readString();
          break;

        case 8:
          this.mem_PIN = in.readString();
          break;

        case 9:
          this.mysource = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










